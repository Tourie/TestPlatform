// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPlatform.Infrastructure.Data;

namespace TestPlatform.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201124161546_Models")]
    partial class Models
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CategoryTest", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("TestsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("CategoryTest");
                });

            modelBuilder.Entity("TestPlatform.Core.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Вопросы по математике",
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Вопросы по физике",
                            Name = "Физика"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Вопросы по программированию",
                            Name = "Программирование"
                        });
                });

            modelBuilder.Entity("TestPlatform.Core.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Testid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Testid");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1 вопрос 1 теста",
                            Testid = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "2 вопрос 1 теста",
                            Testid = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "1 вопрос 2 теста",
                            Testid = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "2 вопрос 2 теста",
                            Testid = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "1 вопрос 3 теста",
                            Testid = 3
                        });
                });

            modelBuilder.Entity("TestPlatform.Core.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Описание",
                            Name = "Вопросы начального уровня",
                            Time = 12L
                        },
                        new
                        {
                            Id = 2,
                            Description = "Описание 2 теста",
                            Name = "Вопросы среднего уровня",
                            Time = 16L
                        },
                        new
                        {
                            Id = 3,
                            Description = "Описание 3 теста",
                            Name = "Вопросы повышенного уровня",
                            Time = 20L
                        });
                });

            modelBuilder.Entity("CategoryTest", b =>
                {
                    b.HasOne("TestPlatform.Core.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestPlatform.Core.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestPlatform.Core.Question", b =>
                {
                    b.HasOne("TestPlatform.Core.Test", "Test")
                        .WithMany()
                        .HasForeignKey("Testid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });
#pragma warning restore 612, 618
        }
    }
}
